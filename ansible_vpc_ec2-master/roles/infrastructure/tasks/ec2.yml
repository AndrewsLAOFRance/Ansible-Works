---
# tasks file for EC2 Web
- name: Get information about vpc and subnet
  set_fact:
    subnets: "{{ subnets[0].id }}"

- name: Create EC2 Web instances
  ec2:
    instance_type: "{{ instace_type }}"
    image: "{{ image }}"
    group: "{{ security_group }}"
    keypair: "{{ keypair }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnets }}"
    assign_public_ip: yes
    monitoring: no
    wait: yes
    volumes:
      - device_name: /dev/sda1 #Chainge root disk size
        volume_type: gp2
        volume_size: 15
        delete_on_termination: true
    instance_tags:
      Name: "{{ web_instance_name }}"
      Type: "{{ web_instance_type }}"
      Env: "{{ web_instance_env }}"
    count_tag:
      Name: "{{ web_instance_name }}"
      Type: "{{ web_instance_type }}"
      Env: "{{ web_instance_env }}"
    exact_count: 1
  register: ec2
        
- name: Print information about EC2 instance
  debug: 
    var: ec2.instances
         
- name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
  lineinfile:
    dest: "./hosts"
    regexp: "{{ item.public_ip }}"
    insertafter: '\[webservers\]'
    line: "{{ item.tags.Name }}  ansible_host={{ item.public_ip }} {{ ssh_key }}=~/.ssh/{{ keypair }}.pem {{ user }}=ubuntu server_type={{ item.tags.Type }}"
    state: present
  with_items: "{{ ec2.instances }}"
        
- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    state: started
  with_items: "{{ ec2.instances }}"

# tasks file for EC2 DB
- name: Create EC2 DB instances
  ec2:
    instance_type: "{{ instace_type }}"
    image: "{{ image }}"
    group: "{{ security_group }}"
    keypair: "{{ keypair }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnets }}"
    assign_public_ip: yes
    monitoring: no
    wait: yes
    volumes:
      - device_name: /dev/sda1 #Chainge root disk size
        volume_type: gp2
        volume_size: 15
        delete_on_termination: true
    instance_tags:
      Name: "{{ db_instance_name }}"
      Type: "{{ db_instance_type }}"
      Env: "{{ db_instance_env }}"
    count_tag:
      Name: "{{ db_instance_name }}"
      Type: "{{ db_instance_type }}"
      Env: "{{ db_instance_env }}"
    exact_count: 1
  register: ec2
        
- name: Print information about EC2 instance
  debug: 
    var: ec2.instances
         
- name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
  lineinfile:
    dest: "./hosts"
    regexp: "{{ item.public_ip }}"
    insertafter: '\[dbservers\]'
    line: "{{ item.tags.Name }}  ansible_host={{ item.public_ip }} {{ ssh_key }}=~/.ssh/{{ keypair }}.pem {{ user }}=ubuntu server_type={{ item.tags.Type }}"
    state: present
  with_items: "{{ ec2.instances }}"
        
- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    state: started
  with_items: "{{ ec2.instances }}"